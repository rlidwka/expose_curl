#!/usr/bin/env node
// vim:syntax=javascript

var which = require('which')
var path = require('path')
var commander = require('commander')

commander
	.option('-g, --grep <pattern>', 'Filter using regexp')
	.option('-i, --incoming',       'Log inbound requests only')
	.option('-o, --outgoing',       'Log outbound requests only')
	.option('-h, --help',           'Display this help')
	.usage('[our_options] <file_to_trace> [their_options]')

commander.commandHelp = function() {
	return ''
}

commander.parse(process.argv)

commander.on('--help', function(){
	console.log('  Example:');
	console.log('');
	console.log('  This would run "npm install -g yapm" and print out all requests');
	console.log('  that have "registry.npmjs.org" mentioned somewhere:');
	console.log('')
	console.log("  $ expose_curl -g registry.npmjs.org npm install -g yapm");
	console.log('');
})

if (commander.args.length === 0 || commander.H) {
	commander.outputHelp()
	return
}

var argv_0 = process.argv[0]
process.argv = commander.args.slice(0)
process.argv.unshift(argv_0)

var exe = process.argv[1]

if (~exe.indexOf('/')) {
	exe = path.resolve(process.cwd(), exe)
} else {
	exe = which.sync(exe)
}

var ec = require('./')

// if neither -i nor -o present, presume -io
if (commander.outgoing == null && commander.incoming == null) {
	commander.outgoing = commander.incoming = true
}

function color_grep(pattern, line) {
	var matches = false
	var m = null
	var colored = ''
	var lastIndex = pattern.lastIndex = 0
	while(m = pattern.exec(line)) {
		matches = true
		colored += line.substr(lastIndex, pattern.lastIndex-lastIndex-m[0].length)
		colored += '\033[01;31m\033[K' + line.substr(pattern.lastIndex-m[0].length, m[0].length) + '\033[m\033[K'
		lastIndex = pattern.lastIndex
	}
	colored += line.substr(lastIndex)
	return matches ? colored : null
}

if (commander.grep) {
	var pattern = new RegExp(commander.grep, 'g')
	var print = function(line) {
		var res = color_grep(pattern, line)
		if (res != null) console.log(res)
	}
} else {
	var print = console.log
}

if (commander.outgoing) {
	ec.catch_outgoing_http(function(ee) {
		ec.request_to_curl(ee, print)
	})
}
if (commander.incoming) {
	ec.catch_incoming_http(function(ee) {
		ec.request_to_curl(ee, print)
	})
}

require(exe)

